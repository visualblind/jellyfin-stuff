user www-data;

# Sets the worker threads to the number of CPU cores available in the system for best performance.
# Should be > the number of CPU cores.
# Maximum number of connections = worker_processes * worker_connections
worker_processes auto;
#worker_processes 2;
worker_priority -10;

# Maximum number of open files per worker process.
# Should be > worker_connections.
worker_rlimit_nofile 65536;

# The file storing the process ID of the main process
pid /run/nginx.pid;

# Include module configuration files
include /etc/nginx/modules-enabled/*.conf;

events {
    # If you need more connections than this, you start optimizing your OS.
    # That's probably the point at which you hire people who are smarter than you as this is *a lot* of requests.
    # Should be < worker_rlimit_nofile.
    worker_connections 10000;
}

error_log /var/log/nginx/error.log warn;

http {

    # Include the perl module
    perl_modules perl/lib;

    # mod_http_perl function
    perl_set $uri_lowercase 'sub {
        my $r = shift;
        my $uri = $r->uri;
        $uri =~ s/\R//; # replace all newline characters
        $uri = lc($uri);
        return $uri;
    }';

fastcgi_buffers 16 4k;
fastcgi_buffer_size 32k;
fastcgi_busy_buffers_size 48k;
#fastcgi_read_timeout 120;
#fastcgi_temp_path off;
fastcgi_temp_file_write_size 1M;

# remove X-Powered-By header set by PHP-FPM module
fastcgi_hide_header X-Powered-By;

variables_hash_max_size 2048;
# Hide nginx version information.
more_set_headers 'Server: Lulz';
server_tokens off;

# Specify MIME types for files.
include mime.types;

default_type application/octet-stream;
client_max_body_size 0;
# Update charset_types to match updated mime.types.
# text/html is always included by charset module.
charset_types text/pub text/css text/plain text/vnd.wap.wml application/javascript application/json application/rss+xml application/xml;

# Include $http_x_forwarded_for within default format used in log files
#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
#                  '$status $body_bytes_sent "$http_referer" '
#                  '"$http_user_agent" "$http_x_forwarded_for"';

log_format main_ext '$remote_addr - $remote_user [$time_local] "$request" '
'$status $body_bytes_sent "$http_referer" '
'"$http_user_agent" "$http_x_forwarded_for" '
'"$host" sn="$server_name" '
'rt=$request_time '
'ua="$upstream_addr" us="$upstream_status" '
'ut="$upstream_response_time" ul="$upstream_response_length" '
'cs=$upstream_cache_status' ;

log_format upstreamlog '[$time_local] $remote_addr - $remote_user - '
'$server_name $host to: $upstream_addr: $request $status '
'upstream_response_time $upstream_response_time msec $msec '
'request_time $request_time';
#log_format upstreamlog '[$time_local] $remote_addr - $remote_user - $server_name $host to: $upstream_addr: $request $status upstream_response_time $upstream_response_time msec $msec request_time $request_time $http_user_agent';

log_format apm '"$time_local" client=$remote_addr '
'method=$request_method request="$request" '
'request_length=$request_length '
'status=$status bytes_sent=$bytes_sent '
'body_bytes_sent=$body_bytes_sent '
'referer=$http_referer '
'user_agent="$http_user_agent" '
'upstream_addr=$upstream_addr '
'upstream_status=$upstream_status '
'upstream_cache_status=$upstream_cache_status '
'request_time=$request_time '
'upstream_response_time=$upstream_response_time '
'upstream_connect_time=$upstream_connect_time '
'upstream_header_time=$upstream_header_time';

log_format cache '$remote_addr - $upstream_cache_status [$time_local] '
'"$request" $status $body_bytes_sent '
'"$http_referer" "$http_user_agent"';

# Log access to this file
# This is only used when you don't override it on a server{} level
#  access_log logs/access.log main;
access_log /var/log/nginx/access.log main_ext;

# How long to allow each connection to stay idle.
# Longer values are better for each individual client, particularly for SSL,
# but means that worker connections are tied up longer.
#keepalive_timeout 30s;
fastcgi_read_timeout 300s;

# Speed up file transfers by using sendfile() to copy directly
# between descriptors rather than using read()/write().
# For performance reasons, on FreeBSD systems w/ ZFS
# this option should be disabled as ZFS's ARC caches
# frequently used files in RAM by default.
sendfile on;

# Don't send out partial frames; this increases throughput
# since TCP frames are filled up before being sent out.
tcp_nopush on;
tcp_nodelay on;

# Enable gzip compression.
gzip on;

# Compression level (1-9).
# 5 is a perfect compromise between size and CPU usage, offering about
# 75% reduction for most ASCII files (almost identical to level 9).
gzip_comp_level 5;

# Don't compress anything that's already small and unlikely to shrink much
# if at all (the default is 20 bytes, which is bad as that usually leads to
# larger files after gzipping).
gzip_min_length 4096;

# Compress data even for clients that are connecting to us via proxies,
# identified by the "Via" header (required for CloudFront).
gzip_proxied any;

# Tell proxies to cache both the gzipped and regular version of a resource
# whenever the client's Accept-Encoding capabilities header varies;
# Avoids the issue where a non-gzip capable client (which is extremely rare
# today) would display gibberish if their proxy gave them the gzipped version.
gzip_vary on;

# Compress all output labeled with one of the following MIME-types.
#gzip_types
# text/html is always compressed by gzip module

# This should be turned on if you are going to have pre-compressed copies (.gz) of
# static files available. If not it should be left off as it will cause extra I/O
# for the check. It is best if you enable this in a location{} block for
# a specific directory, or on an individual server{} level.
#gzip_static on;

# Include files in the sites-enabled folder. server{} configuration files should be
# placed in the sites-available folder, and then the configuration should be enabled
# by creating a symlink.
# See doc/sites-enabled.md

resolver 1.1.1.1 1.0.0.1 8.8.8.8 valid=300s;
resolver_timeout 3s;

# CloudFlare reverse proxy real IP addresses
#real_ip_recursive on;

# Include important configuration files
include sites-enabled/*.conf;
include conf.d/*.conf;

proxy_cache_key "$scheme$request_method$host$request_uri";
proxy_cache_path /dev/shm/nginx-cache/travisflix levels=1:2 keys_zone=jellyfin:10m max_size=1500M inactive=120h use_temp_path=off loader_threshold=400 loader_files=325;

proxy_cache_min_uses 1;
proxy_cache_valid 200 302 304 1d;
proxy_cache_valid 301 12h;
proxy_cache_valid 404 1m;
#proxy_ignore_headers Cache-Control Expires;
proxy_hide_header X-Powered-By;
proxy_cache_revalidate on;
proxy_cache_use_stale error timeout updating http_500;
proxy_cache_background_update on;
proxy_cache_lock on;

}
